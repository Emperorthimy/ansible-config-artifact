---
# tasks file for artifactory

- name: install java 11
  ansible.builtin.yum:
    name: java-11-openjdk-devel
    state: present

- name: install java 11
  ansible.builtin.yum:
    name: 
      - wget
      - unzip
    state: present

- name: Configuring java path
  ansible.builtin.template:
    src: templates/bash-profile.j2
    dest: .bash_profile
  

- name: reload the /etc/profile
  shell: source ~/.bash_profile


- name: add the repository key to repos list
  ansible.builtin.get_url:
    url:  https://releases.jfrog.io/artifactory/artifactory-rpms/artifactory-rpms.repo 
    dest: /home/ec2-user/jfrog-artifactory-rpms.repo
    mode: '0755'
 
- name: Copy the downloaded file to the etc repo
  ansible.builtin.copy:
    src: /home/ec2-user/jfrog-artifactory-rpms.repo
    dest: /etc/yum.repos.d/jfrog-artifactory-rpms.repo
    remote_src: yes
    follow: yes

- name: update cache
  ansible.builtin.yum:
    update_cache: yes

- name: install artifactory
  ansible.builtin.yum:
    name: jfrog-artifactory-oss
    state: present

- name: start and enable artifactory
  ansible.builtin.service:
    name: artifactory
    state: started
    enabled: yes
# tasks file for docker-compose-artifactory
- debug: msg="Starting tasks from docker-compose-artifactory..."

# vars/main.yml is auto-imported.
- name: Import env-sensitive overrides
  include_vars: "vars/{{ artifactory_env }}.yml"
  when: artifactory_env != "dev"

# easy pre-reqs
- name: Ensure the docker and docker-compose python libs are installed.
  pip:
    name: docker
    version: "{{ artifactory_pypi_docker_version|default(omit) }}"
- name: Ensure the docker-compose python libs are installed.
  pip:
    name: docker-compose
    version: "{{ artifactory_pypi_docker_compose_version|default(omit) }}"

# drop nginx configs
- name: Create NGINX config directory
  file:
    state: directory
    path: "{{ artifactory_datapath }}/nginx"
    mode: 0755
- name: Create NGINX logs directory
  file:
    state: directory
    path: "{{ artifactory_datapath }}/nginx/logs"
    mode: 0755
- name: Drop NGINX config file
  copy:
    dest: "{{ artifactory_datapath }}/nginx/nginx.conf"
    content: "{{ artifactory_proxy_config }}"
    mode: 0644

# do the thing
- name: Launch services with docker-compose.yml
  docker_service:
    state: "{{ artifactory_state }}"
    project_name: "{{ artifactory_env }}_{{ artifactory_name }}"
    pull: yes
    definition:
      version: "2.1"
      services:
        nginx:
          image: "{{ artifactory_proxy_image }}:{{ artifactory_proxy_image_tag }}"
          container_name: "{{ artifactory_env }}_{{ artifactory_name }}_nginx"
          volumes:
            - "{{ artifactory_datapath }}/nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro"
            - "{{ artifactory_datapath }}/nginx/logs:/var/log/nginx"
          links:
            - "artifactory"
          ports:
            - "{{ artifactory_port }}:80"
        postgresql:
          image: "{{ artifactory_postgres_image }}:{{ artifactory_postgres_image_tag }}"
          container_name: "{{ artifactory_env }}_{{ artifactory_name }}_postgresql"
          environment:
            - POSTGRES_DB=artifactory
            # The following must match the DB_USER and DB_PASSWORD values passed to Artifactory
            - "POSTGRES_USER={{ artifactory_postgres_user }}"
            - "POSTGRES_PASSWORD={{ artifactory_postgres_password }}"
          volumes:
            - "{{ artifactory_datapath }}/postgresql:/var/lib/postgresql/data"
          restart: always
          healthcheck:
            test: ["CMD-SHELL", "pg_isready -U {{ artifactory_postgres_user }}"]
            interval: 30s
            timeout: 30s
            retries: 3
        artifactory:
          image: "{{ artifactory_image }}:{{ artifactory_image_tag }}"
          container_name: "{{ artifactory_env }}_{{ artifactory_name }}_artifactory"
          depends_on:
            - "postgresql"
          links:
            - "postgresql"
          volumes:
            - "{{ artifactory_datapath }}/artifactory:/var/opt/jfrog/artifactory"
          entrypoint: /entrypoint-artifactory.sh
          environment:
            - DB_TYPE=postgresql
            # The following must match the POSTGRES_USER and POSTGRES_PASSWORD values passed to PostgreSQL
            - "DB_USER={{ artifactory_postgres_user }}"
            - "DB_PASSWORD={{ artifactory_postgres_password }}"
            # Add extra Java options by uncommenting the following line
            - "EXTRA_JAVA_OPTIONS={{ artifactory_javaopts }}"
          restart: always
  register: output

- debug: var=output

# inline unit testing
- name: Confirm services launched successfully
  assert:
    that:
      - "postgresql.{{ artifactory_env }}_{{ artifactory_name }}_postgresql.state.running"
      - "artifactory.{{ artifactory_env }}_{{ artifactory_name }}_artifactory.state.running"
      - "nginx.{{ artifactory_env }}_{{ artifactory_name }}_nginx.state.running"
  when: artifactory_state == "present"
